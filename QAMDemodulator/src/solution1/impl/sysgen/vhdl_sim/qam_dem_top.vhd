-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qam_dem_top is
port (
    din_i_V : IN STD_LOGIC_VECTOR (15 downto 0);
    din_q_V : IN STD_LOGIC_VECTOR (15 downto 0);
    dout_mix_i_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_mix_q_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    ph_in_i_V : IN STD_LOGIC_VECTOR (11 downto 0);
    ph_in_q_V : IN STD_LOGIC_VECTOR (11 downto 0);
    ph_out_i_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    ph_out_q_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    loop_integ_V : OUT STD_LOGIC_VECTOR (27 downto 0);
    control_qam_V : IN STD_LOGIC_VECTOR (1 downto 0);
    control_lf_p : IN STD_LOGIC_VECTOR (7 downto 0);
    control_lf_i : IN STD_LOGIC_VECTOR (7 downto 0);
    control_lf_out_gain : IN STD_LOGIC_VECTOR (7 downto 0);
    control_reg_clr : IN STD_LOGIC_VECTOR (0 downto 0);
    control_reg_init_V : IN STD_LOGIC_VECTOR (27 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of qam_dem_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qam_dem_top,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc6slx45tfgg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.646000,HLS_SYN_LAT=14,HLS_SYN_TPT=15,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=436,HLS_SYN_LUT=1285}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal qam_dem_top_mounstrito_U0_ap_start : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ap_done : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ap_continue : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ap_idle : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ap_ready : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_din_i_V : STD_LOGIC_VECTOR (15 downto 0);
    signal qam_dem_top_mounstrito_U0_din_q_V : STD_LOGIC_VECTOR (15 downto 0);
    signal qam_dem_top_mounstrito_U0_dout_mix_i_V : STD_LOGIC_VECTOR (15 downto 0);
    signal qam_dem_top_mounstrito_U0_dout_mix_i_V_ap_vld : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_dout_mix_q_V : STD_LOGIC_VECTOR (15 downto 0);
    signal qam_dem_top_mounstrito_U0_dout_mix_q_V_ap_vld : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ph_in_i_V : STD_LOGIC_VECTOR (11 downto 0);
    signal qam_dem_top_mounstrito_U0_ph_in_q_V : STD_LOGIC_VECTOR (11 downto 0);
    signal qam_dem_top_mounstrito_U0_ph_out_i_V : STD_LOGIC_VECTOR (11 downto 0);
    signal qam_dem_top_mounstrito_U0_ph_out_i_V_ap_vld : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_ph_out_q_V : STD_LOGIC_VECTOR (11 downto 0);
    signal qam_dem_top_mounstrito_U0_ph_out_q_V_ap_vld : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_loop_integ_V : STD_LOGIC_VECTOR (27 downto 0);
    signal qam_dem_top_mounstrito_U0_loop_integ_V_ap_vld : STD_LOGIC;
    signal qam_dem_top_mounstrito_U0_control_lf_p : STD_LOGIC_VECTOR (7 downto 0);
    signal qam_dem_top_mounstrito_U0_control_lf_i : STD_LOGIC_VECTOR (7 downto 0);
    signal qam_dem_top_mounstrito_U0_control_lf_out_gain : STD_LOGIC_VECTOR (7 downto 0);
    signal qam_dem_top_mounstrito_U0_control_reg_clr : STD_LOGIC_VECTOR (0 downto 0);
    signal qam_dem_top_mounstrito_U0_control_reg_init_V : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_reg_procdone_qam_dem_top_mounstrito_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component qam_dem_top_mounstrito IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_i_V : IN STD_LOGIC_VECTOR (15 downto 0);
        din_q_V : IN STD_LOGIC_VECTOR (15 downto 0);
        dout_mix_i_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        dout_mix_i_V_ap_vld : OUT STD_LOGIC;
        dout_mix_q_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        dout_mix_q_V_ap_vld : OUT STD_LOGIC;
        ph_in_i_V : IN STD_LOGIC_VECTOR (11 downto 0);
        ph_in_q_V : IN STD_LOGIC_VECTOR (11 downto 0);
        ph_out_i_V : OUT STD_LOGIC_VECTOR (11 downto 0);
        ph_out_i_V_ap_vld : OUT STD_LOGIC;
        ph_out_q_V : OUT STD_LOGIC_VECTOR (11 downto 0);
        ph_out_q_V_ap_vld : OUT STD_LOGIC;
        loop_integ_V : OUT STD_LOGIC_VECTOR (27 downto 0);
        loop_integ_V_ap_vld : OUT STD_LOGIC;
        control_lf_p : IN STD_LOGIC_VECTOR (7 downto 0);
        control_lf_i : IN STD_LOGIC_VECTOR (7 downto 0);
        control_lf_out_gain : IN STD_LOGIC_VECTOR (7 downto 0);
        control_reg_clr : IN STD_LOGIC_VECTOR (0 downto 0);
        control_reg_init_V : IN STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    qam_dem_top_mounstrito_U0 : component qam_dem_top_mounstrito
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => qam_dem_top_mounstrito_U0_ap_start,
        ap_done => qam_dem_top_mounstrito_U0_ap_done,
        ap_continue => qam_dem_top_mounstrito_U0_ap_continue,
        ap_idle => qam_dem_top_mounstrito_U0_ap_idle,
        ap_ready => qam_dem_top_mounstrito_U0_ap_ready,
        din_i_V => qam_dem_top_mounstrito_U0_din_i_V,
        din_q_V => qam_dem_top_mounstrito_U0_din_q_V,
        dout_mix_i_V => qam_dem_top_mounstrito_U0_dout_mix_i_V,
        dout_mix_i_V_ap_vld => qam_dem_top_mounstrito_U0_dout_mix_i_V_ap_vld,
        dout_mix_q_V => qam_dem_top_mounstrito_U0_dout_mix_q_V,
        dout_mix_q_V_ap_vld => qam_dem_top_mounstrito_U0_dout_mix_q_V_ap_vld,
        ph_in_i_V => qam_dem_top_mounstrito_U0_ph_in_i_V,
        ph_in_q_V => qam_dem_top_mounstrito_U0_ph_in_q_V,
        ph_out_i_V => qam_dem_top_mounstrito_U0_ph_out_i_V,
        ph_out_i_V_ap_vld => qam_dem_top_mounstrito_U0_ph_out_i_V_ap_vld,
        ph_out_q_V => qam_dem_top_mounstrito_U0_ph_out_q_V,
        ph_out_q_V_ap_vld => qam_dem_top_mounstrito_U0_ph_out_q_V_ap_vld,
        loop_integ_V => qam_dem_top_mounstrito_U0_loop_integ_V,
        loop_integ_V_ap_vld => qam_dem_top_mounstrito_U0_loop_integ_V_ap_vld,
        control_lf_p => qam_dem_top_mounstrito_U0_control_lf_p,
        control_lf_i => qam_dem_top_mounstrito_U0_control_lf_i,
        control_lf_out_gain => qam_dem_top_mounstrito_U0_control_lf_out_gain,
        control_reg_clr => qam_dem_top_mounstrito_U0_control_reg_clr,
        control_reg_init_V => qam_dem_top_mounstrito_U0_control_reg_init_V);





    -- ap_reg_procdone_qam_dem_top_mounstrito_U0 assign process. --
    ap_reg_procdone_qam_dem_top_mounstrito_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_qam_dem_top_mounstrito_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_qam_dem_top_mounstrito_U0 <= ap_const_logic_0;
                elsif ((qam_dem_top_mounstrito_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_qam_dem_top_mounstrito_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(qam_dem_top_mounstrito_U0_ap_idle)
    begin
        if ((qam_dem_top_mounstrito_U0_ap_idle = ap_const_logic_1)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(qam_dem_top_mounstrito_U0_ap_done)
    begin
        if ((qam_dem_top_mounstrito_U0_ap_done = ap_const_logic_1)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= qam_dem_top_mounstrito_U0_ap_ready;
    dout_mix_i_V <= qam_dem_top_mounstrito_U0_dout_mix_i_V;
    dout_mix_q_V <= qam_dem_top_mounstrito_U0_dout_mix_q_V;
    loop_integ_V <= qam_dem_top_mounstrito_U0_loop_integ_V;
    ph_out_i_V <= qam_dem_top_mounstrito_U0_ph_out_i_V;
    ph_out_q_V <= qam_dem_top_mounstrito_U0_ph_out_q_V;
    qam_dem_top_mounstrito_U0_ap_continue <= ap_sig_hs_continue;
    qam_dem_top_mounstrito_U0_ap_start <= ap_start;
    qam_dem_top_mounstrito_U0_control_lf_i <= control_lf_i;
    qam_dem_top_mounstrito_U0_control_lf_out_gain <= control_lf_out_gain;
    qam_dem_top_mounstrito_U0_control_lf_p <= control_lf_p;
    qam_dem_top_mounstrito_U0_control_reg_clr <= control_reg_clr;
    qam_dem_top_mounstrito_U0_control_reg_init_V <= control_reg_init_V;
    qam_dem_top_mounstrito_U0_din_i_V <= din_i_V;
    qam_dem_top_mounstrito_U0_din_q_V <= din_q_V;
    qam_dem_top_mounstrito_U0_ph_in_i_V <= ph_in_i_V;
    qam_dem_top_mounstrito_U0_ph_in_q_V <= ph_in_q_V;
end behav;
