-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qam_dem_top_mounstrito is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_i_V : IN STD_LOGIC_VECTOR (15 downto 0);
    din_q_V : IN STD_LOGIC_VECTOR (15 downto 0);
    dout_mix_i_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_mix_i_V_ap_vld : OUT STD_LOGIC;
    dout_mix_q_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_mix_q_V_ap_vld : OUT STD_LOGIC;
    ph_in_i_V : IN STD_LOGIC_VECTOR (11 downto 0);
    ph_in_q_V : IN STD_LOGIC_VECTOR (11 downto 0);
    ph_out_i_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    ph_out_i_V_ap_vld : OUT STD_LOGIC;
    ph_out_q_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    ph_out_q_V_ap_vld : OUT STD_LOGIC;
    loop_integ_V : OUT STD_LOGIC_VECTOR (27 downto 0);
    loop_integ_V_ap_vld : OUT STD_LOGIC;
    control_lf_p : IN STD_LOGIC_VECTOR (7 downto 0);
    control_lf_i : IN STD_LOGIC_VECTOR (7 downto 0);
    control_lf_out_gain : IN STD_LOGIC_VECTOR (7 downto 0);
    control_reg_clr : IN STD_LOGIC_VECTOR (0 downto 0);
    control_reg_init_V : IN STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of qam_dem_top_mounstrito is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_1F7 : STD_LOGIC_VECTOR (8 downto 0) := "111110111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv28_7FFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "0111111111111111111111111111";
    constant ap_const_lv28_8000000 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal i_reg_V : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal phase_angle_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_82 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal OP1_V_i_cast_fu_320_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal OP1_V_i_cast_reg_1471 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_sig_bdd_122 : BOOLEAN;
    signal OP2_V_i_cast_fu_325_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal OP2_V_i_cast_reg_1476 : STD_LOGIC_VECTOR (26 downto 0);
    signal OP2_V_1_i_cast_fu_330_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal OP2_V_1_i_cast_reg_1481 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_335_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_reg_1486 : STD_LOGIC_VECTOR (26 downto 0);
    signal sd_out_i_V_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1509 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal sd_out_q_V_reg_1521 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal isneg_1_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_1_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_i_reg_1541 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1547 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal OP1_V_fu_628_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal OP2_V_fu_633_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal isneg_2_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal p_Val2_9_reg_1568 : STD_LOGIC_VECTOR (13 downto 0);
    signal newsignbit_2_reg_1574 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i8_reg_1580 : STD_LOGIC_VECTOR (1 downto 0);
    signal OP1_V_1_fu_692_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal OP2_V_1_fu_697_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_9_fu_775_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_reg_1596 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_24_reg_1601 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal overflow_3_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_reg_1607 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_reg_1613 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_26_fu_977_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_26_reg_1620 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal p_Val2_4_fu_1041_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_4_reg_1625 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_16_i_fu_1137_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_16_i_reg_1630 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal isNeg_2_fu_1160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_1636 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_1174_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_assign_3_reg_1641 : STD_LOGIC_VECTOR (7 downto 0);
    signal msb_V_reg_1647 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_234 : BOOLEAN;
    signal tmp_26_reg_1654 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_adr_V_reg_1660 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal tmp_23_i_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_fu_1305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_41_fu_1145_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal loop_integ_V_preg : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_i_fu_340_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_1_fu_348_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_i_fu_380_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_not_i1_i_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_i_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i1_i_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i1_i_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i1_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_i_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_brmerge_i_i1_i_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_i_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_475_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_3_fu_483_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_not_i_i_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_i_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_fu_585_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal brmerge_i_i_i_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_brmerge_i_i_i_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_i_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_592_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_i3_fu_637_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal isneg_2_fu_656_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_9_fu_664_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal newsignbit_2_fu_674_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Result_i8_fu_682_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Result_2_fu_644_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_not_i_i9_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i1_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i1_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_mux_i_fu_761_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_i1_fu_768_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_i1_fu_783_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_cast_i_fu_790_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_23_fu_794_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_23_fu_794_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_826_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal newsignbit_3_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_i_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_3_fu_800_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_i_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_i_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_i_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_i_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_not_i_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_i_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ssdm_int_V_write_assign_fu_898_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_1_i_fu_905_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_fu_911_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal isNeg_fu_927_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_935_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_assign_fu_941_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_fu_919_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_i1_fu_957_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_i_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast6_i_fu_949_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_6_i2_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_973_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_7_i1_fu_967_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_19_cast_i_fu_985_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_989_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_1_fu_995_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i1_fu_1003_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_1009_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_i_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast5_i_fu_1017_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_10_i_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1037_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_11_i_fu_1031_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_5_fu_1053_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_i_fu_1058_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_13_i_fu_1062_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_27_fu_1065_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal newsignbit_4_fu_1083_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_4_fu_1071_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_i_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i2_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_29_fu_1079_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal underflow_4_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_28_mux_i_fu_1121_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_i2_fu_1129_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_17_i_fu_1168_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_fu_1188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_i_fu_1185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast3_i_fu_1182_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_19_i_fu_1191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1202_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_20_i_fu_1197_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_i2_15_fu_1217_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_33_fu_1206_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_35_cast_i_fu_1225_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_i_fu_1229_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_34_fu_1233_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal cos_adr_V_3_fu_1283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_adr_V_fu_1288_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_1_fu_1294_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_31_cast_i_fu_1314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_32_cast_i_fu_1310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_i_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_demorgan_i_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_fu_1328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1381_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp_i_fu_1339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_1395_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_1405_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_1422_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sin_out_V_fu_1333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1432_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_fu_1436_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_cond_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1446_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_fu_1454_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_276_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component qam_dem_top_mul_16s_12s_27_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component qam_dem_top_mounstrito_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    cos_lut_U : component qam_dem_top_mounstrito_cos_lut
    generic map (
        DataWidth => 15,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    qam_dem_top_mul_16s_12s_27_2_U1 : component qam_dem_top_mul_16s_12s_27_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- loop_integ_V_preg assign process. --
    loop_integ_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_integ_V_preg <= ap_const_lv28_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                    loop_integ_V_preg <= p_Val2_41_fu_1145_p3;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_122))) then
                OP1_V_i_cast_reg_1471 <= OP1_V_i_cast_fu_320_p1;
                OP2_V_i_cast_reg_1476 <= OP2_V_i_cast_fu_325_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                OP2_V_1_i_cast_reg_1481 <= OP2_V_1_i_cast_fu_330_p1;
                tmp_1_reg_1486 <= tmp_1_fu_335_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                i_reg_V <= p_Val2_41_fu_1145_p3;
                isNeg_2_reg_1636 <= control_lf_out_gain(7 downto 7);
                sh_assign_3_reg_1641 <= sh_assign_3_fu_1174_p3;
                tmp_16_i_reg_1630 <= tmp_16_i_fu_1137_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                isneg_1_reg_1527 <= p_Val2_3_fu_483_p2(26 downto 26);
                newsignbit_1_reg_1533 <= p_Val2_3_fu_483_p2(24 downto 24);
                p_Result_1_i_reg_1541 <= p_Val2_3_fu_483_p2(26 downto 25);
                sd_out_q_V_reg_1521 <= p_Val2_3_fu_483_p2(26 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                isneg_2_reg_1562 <= isneg_2_fu_656_p1(20 downto 20);
                newsignbit_2_reg_1574 <= newsignbit_2_fu_674_p1(18 downto 18);
                p_Result_i8_reg_1580 <= p_Result_i8_fu_682_p1(20 downto 19);
                p_Val2_9_reg_1568 <= p_Val2_9_fu_664_p1(18 downto 5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                msb_V_reg_1647 <= p_Val2_34_fu_1233_p2(26 downto 25);
                phase_angle_V <= p_Val2_34_fu_1233_p2(26 downto 11);
                sin_adr_V_reg_1660 <= p_Val2_34_fu_1233_p2(24 downto 15);
                tmp_26_reg_1654 <= p_Val2_34_fu_1233_p2(25 downto 25);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                newsignbit_reg_1497 <= p_Val2_1_fu_348_p2(24 downto 24);
                overflow_reg_1503 <= overflow_fu_408_p2;
                sd_out_i_V_reg_1491 <= p_Val2_1_fu_348_p2(26 downto 11);
                underflow_reg_1509 <= underflow_fu_432_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                overflow_3_reg_1607 <= overflow_3_fu_854_p2;
                p_Val2_24_reg_1601 <= p_Val2_23_fu_794_p2(18 downto 5);
                underflow_3_reg_1613 <= underflow_3_fu_878_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                p_Val2_26_reg_1620 <= p_Val2_26_fu_977_p3;
                p_Val2_4_reg_1625 <= p_Val2_4_fu_1041_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then
                reg_312 <= grp_fu_276_p2(26 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then
                reg_316 <= grp_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_3_reg_1516 <= tmp_3_fu_467_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_6_reg_1547 <= tmp_6_fu_620_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_9_reg_1596 <= tmp_9_fu_775_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_122)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_122)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_1_fu_692_p1 <= std_logic_vector(resize(signed(p_Result_2_fu_644_p5),21));

        OP1_V_fu_628_p1 <= std_logic_vector(resize(signed(p_Result_s_fu_592_p5),21));

        OP1_V_i_cast_fu_320_p1 <= std_logic_vector(resize(signed(din_i_V),27));

        OP2_V_1_fu_697_p1 <= std_logic_vector(resize(signed(sd_out_i_V_reg_1491),21));

        OP2_V_1_i_cast_fu_330_p1 <= std_logic_vector(resize(signed(ph_in_q_V),27));

        OP2_V_fu_633_p1 <= std_logic_vector(resize(signed(sd_out_q_V_reg_1521),21));

        OP2_V_i_cast_fu_325_p1 <= std_logic_vector(resize(signed(ph_in_i_V),27));


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_122 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_234 assign process. --
    ap_sig_bdd_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_234 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_82 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_99 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_234)
    begin
        if (ap_sig_bdd_234) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_82)
    begin
        if (ap_sig_bdd_82) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_99)
    begin
        if (ap_sig_bdd_99) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_i_fu_893_p2 <= (overflow_3_reg_1607 or underflow_4_not_i_fu_888_p2);
    brmerge39_i1_i_fu_426_p2 <= (p_not38_i1_i_fu_420_p2 or newsignbit_0_not_i1_i_fu_414_p2);
    brmerge39_i_i1_fu_732_p2 <= (p_not38_i_i1_fu_727_p2 or newsignbit_0_not_i_i1_fu_722_p2);
    brmerge39_i_i_fu_556_p2 <= (p_not38_i_i_fu_551_p2 or newsignbit_0_not_i_i_fu_546_p2);
    brmerge39_i_i_i_fu_872_p2 <= (p_not38_i_i_i_fu_866_p2 or newsignbit_0_not_i_i_i_fu_860_p2);
    brmerge8_i_fu_447_p2 <= (overflow_reg_1503 or underflow_not_i_fu_442_p2);
    brmerge9_i_fu_579_p2 <= (overflow_1_fu_540_p2 or underflow_1_not_i_fu_573_p2);
    brmerge_i1_fu_1115_p2 <= (newsignbit_4_fu_1083_p3 or isneg_not_i_fu_1109_p2);
    brmerge_i1_i_fu_396_p2 <= (newsignbit_fu_372_p3 or p_not_i1_i_fu_390_p2);
    brmerge_i_fu_755_p2 <= (overflow_2_fu_716_p2 or underflow_not_i1_fu_749_p2);
    brmerge_i_i1_fu_706_p2 <= (newsignbit_2_reg_1574 or p_not_i_i9_fu_701_p2);
    brmerge_i_i1_i_fu_438_p2 <= (underflow_reg_1509 or overflow_reg_1503);
    brmerge_i_i4_i_fu_842_p2 <= (newsignbit_3_fu_818_p3 or p_not_i_i_i_fu_836_p2);
    brmerge_i_i_fu_530_p2 <= (newsignbit_1_reg_1533 or p_not_i_i_fu_525_p2);
    brmerge_i_i_i1_fu_743_p2 <= (underflow_2_fu_738_p2 or overflow_2_fu_716_p2);
    brmerge_i_i_i2_fu_1103_p2 <= (isneg_4_fu_1071_p3 xor newsignbit_4_fu_1083_p3);
    brmerge_i_i_i_fu_567_p2 <= (underflow_1_fu_562_p2 or overflow_1_fu_540_p2);
    brmerge_i_i_i_i_fu_884_p2 <= (underflow_3_reg_1613 or overflow_3_reg_1607);
    cos_adr_V_3_fu_1283_p2 <= (sin_adr_V_reg_1660 xor ap_const_lv10_3FF);
    cos_adr_V_fu_1288_p3 <= 
        cos_adr_V_3_fu_1283_p2 when (tmp_26_reg_1654(0) = '1') else 
        sin_adr_V_reg_1660;
    cos_lut_address0 <= tmp_23_i_fu_1300_p1(10 - 1 downto 0);
    cos_lut_address1 <= tmp_24_i_fu_1305_p1(10 - 1 downto 0);

    -- cos_lut_ce0 assign process. --
    cos_lut_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- cos_lut_ce1 assign process. --
    cos_lut_ce1_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dout_mix_i_V <= sd_out_i_V_reg_1491;

    -- dout_mix_i_V_ap_vld assign process. --
    dout_mix_i_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            dout_mix_i_V_ap_vld <= ap_const_logic_1;
        else 
            dout_mix_i_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dout_mix_q_V <= sd_out_q_V_reg_1521;

    -- dout_mix_q_V_ap_vld assign process. --
    dout_mix_q_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            dout_mix_q_V_ap_vld <= ap_const_logic_1;
        else 
            dout_mix_q_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_276_ce assign process. --
    grp_fu_276_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, ap_sig_bdd_122, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_122)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            grp_fu_276_ce <= ap_const_logic_1;
        else 
            grp_fu_276_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_276_p0 assign process. --
    grp_fu_276_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, OP1_V_i_cast_fu_320_p1, OP1_V_i_cast_reg_1471, tmp_1_fu_335_p1, tmp_1_reg_1486, ap_sig_cseq_ST_st7_fsm_6, OP2_V_fu_633_p1, ap_sig_cseq_ST_st8_fsm_7, OP2_V_1_fu_697_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_276_p0 <= OP2_V_1_fu_697_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_276_p0 <= OP2_V_fu_633_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_276_p0 <= tmp_1_reg_1486(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_276_p0 <= OP1_V_i_cast_reg_1471(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_276_p0 <= tmp_1_fu_335_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_276_p0 <= OP1_V_i_cast_fu_320_p1(16 - 1 downto 0);
        else 
            grp_fu_276_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_276_p1 assign process. --
    grp_fu_276_p1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, OP2_V_i_cast_fu_325_p1, OP2_V_i_cast_reg_1476, OP2_V_1_i_cast_fu_330_p1, OP2_V_1_i_cast_reg_1481, ap_sig_cseq_ST_st7_fsm_6, OP1_V_fu_628_p1, ap_sig_cseq_ST_st8_fsm_7, OP1_V_1_fu_692_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_276_p1 <= OP1_V_1_fu_692_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_276_p1 <= OP1_V_fu_628_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_276_p1 <= OP2_V_i_cast_reg_1476(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_276_p1 <= OP2_V_1_i_cast_reg_1481(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_276_p1 <= OP2_V_1_i_cast_fu_330_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_276_p1 <= OP2_V_i_cast_fu_325_p1(12 - 1 downto 0);
        else 
            grp_fu_276_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_1_fu_995_p3 <= sh_assign_1_fu_989_p2(8 downto 8);
    isNeg_2_fu_1160_p3 <= control_lf_out_gain(7 downto 7);
    isNeg_fu_927_p3 <= control_lf_p(7 downto 7);
    isneg_2_fu_656_p1 <= grp_fu_276_p2(21 - 1 downto 0);
    isneg_3_fu_800_p3 <= p_Val2_23_fu_794_p2(20 downto 20);
    isneg_4_fu_1071_p3 <= p_Val2_27_fu_1065_p2(28 downto 28);
    isneg_fu_364_p3 <= p_Val2_1_fu_348_p2(26 downto 26);
    isneg_not_i_fu_1109_p2 <= (isneg_4_fu_1071_p3 xor ap_const_lv1_1);

    -- loop_integ_V assign process. --
    loop_integ_V_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, p_Val2_41_fu_1145_p3, loop_integ_V_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            loop_integ_V <= p_Val2_41_fu_1145_p3;
        else 
            loop_integ_V <= loop_integ_V_preg;
        end if; 
    end process;


    -- loop_integ_V_ap_vld assign process. --
    loop_integ_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            loop_integ_V_ap_vld <= ap_const_logic_1;
        else 
            loop_integ_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    newsignbit_0_not_i1_i_fu_414_p2 <= (newsignbit_fu_372_p3 xor ap_const_lv1_1);
    newsignbit_0_not_i_i1_fu_722_p2 <= (newsignbit_2_reg_1574 xor ap_const_lv1_1);
    newsignbit_0_not_i_i_fu_546_p2 <= (newsignbit_1_reg_1533 xor ap_const_lv1_1);
    newsignbit_0_not_i_i_i_fu_860_p2 <= (newsignbit_3_fu_818_p3 xor ap_const_lv1_1);
    newsignbit_2_fu_674_p1 <= grp_fu_276_p2(21 - 1 downto 0);
    newsignbit_3_fu_818_p3 <= p_Val2_23_fu_794_p2(18 downto 18);
    newsignbit_4_fu_1083_p3 <= p_Val2_27_fu_1065_p2(27 downto 27);
    newsignbit_fu_372_p3 <= p_Val2_1_fu_348_p2(24 downto 24);
    not_brmerge_i_i1_i_fu_452_p2 <= (brmerge_i_i1_i_fu_438_p2 xor ap_const_lv1_1);
    not_brmerge_i_i_i_fu_604_p2 <= (brmerge_i_i_i_fu_567_p2 xor ap_const_lv1_1);
    or_cond_fu_1375_p2 <= (sel_tmp7_i_fu_1369_p2 or sel_tmp4_i_fu_1357_p2);
    overflow_1_fu_540_p2 <= (brmerge_i_i_fu_530_p2 and tmp_7_i_fu_535_p2);
    overflow_2_fu_716_p2 <= (brmerge_i_i1_fu_706_p2 and tmp_8_i_fu_711_p2);
    overflow_3_fu_854_p2 <= (brmerge_i_i4_i_fu_842_p2 and tmp_3_i1_fu_848_p2);
    overflow_fu_408_p2 <= (brmerge_i1_i_fu_396_p2 and tmp_5_i_fu_402_p2);
    p_Result_2_fu_644_p5 <= (tmp_1_i3_fu_637_p3 & ap_const_lv5_0(2 downto 0));
    p_Result_i8_fu_682_p1 <= grp_fu_276_p2(21 - 1 downto 0);
    p_Result_i_fu_380_p4 <= p_Val2_1_fu_348_p2(26 downto 25);
    p_Result_s_fu_592_p5 <= (tmp_i2_fu_585_p3 & ap_const_lv5_0(2 downto 0));
    p_Val2_1_fu_348_p2 <= std_logic_vector(unsigned(tmp_6_i_fu_340_p3) - unsigned(reg_316));
    p_Val2_1_i_fu_905_p3 <= 
        ap_const_lv14_2000 when (underflow_3_reg_1613(0) = '1') else 
        p_Val2_24_reg_1601;
    p_Val2_21_mux_i_fu_761_p3 <= 
        ap_const_lv14_1FFF when (brmerge_i_i_i1_fu_743_p2(0) = '1') else 
        p_Val2_9_reg_1568;
    p_Val2_23_fu_794_p1 <= reg_316(21 - 1 downto 0);
    p_Val2_23_fu_794_p2 <= std_logic_vector(signed(tmp_10_cast_i_fu_790_p1) - signed(p_Val2_23_fu_794_p1));
    p_Val2_26_fu_977_p3 <= 
        tmp_16_fu_973_p1 when (isNeg_fu_927_p3(0) = '1') else 
        tmp_7_i1_fu_967_p2;
    p_Val2_27_fu_1065_p2 <= std_logic_vector(signed(tmp_12_i_fu_1058_p1) + signed(tmp_13_i_fu_1062_p1));
    p_Val2_28_mux_i_fu_1121_p3 <= 
        ap_const_lv28_7FFFFFF when (brmerge_i_i_i2_fu_1103_p2(0) = '1') else 
        p_Val2_29_fu_1079_p1;
    p_Val2_29_fu_1079_p1 <= p_Val2_27_fu_1065_p2(28 - 1 downto 0);
    p_Val2_31_cast_i_fu_1314_p1 <= std_logic_vector(resize(unsigned(cos_lut_q1),16));
    p_Val2_32_cast_i_fu_1310_p1 <= std_logic_vector(resize(unsigned(cos_lut_q0),16));
    p_Val2_33_fu_1206_p3 <= 
        tmp_25_fu_1202_p1 when (isNeg_2_reg_1636(0) = '1') else 
        tmp_20_i_fu_1197_p2;
    p_Val2_34_fu_1233_p2 <= std_logic_vector(signed(tmp_35_cast_i_fu_1225_p1) - signed(tmp_21_i_fu_1229_p1));
    p_Val2_3_fu_483_p2 <= std_logic_vector(unsigned(tmp_3_i_fu_475_p3) + unsigned(reg_316));
    p_Val2_41_fu_1145_p3 <= 
        control_reg_init_V when (control_reg_clr(0) = '1') else 
        p_Val2_5_fu_1053_p2;
    p_Val2_4_fu_1041_p3 <= 
        tmp_18_fu_1037_p1 when (isNeg_1_fu_995_p3(0) = '1') else 
        tmp_11_i_fu_1031_p2;
    p_Val2_5_fu_1053_p2 <= std_logic_vector(unsigned(i_reg_V) + unsigned(p_Val2_4_reg_1625));
    p_Val2_9_fu_664_p1 <= grp_fu_276_p2(21 - 1 downto 0);
    p_Val2_i1_fu_768_p3 <= 
        ap_const_lv14_2000 when (underflow_2_fu_738_p2(0) = '1') else 
        p_Val2_9_reg_1568;
    p_Val2_i2_fu_1129_p3 <= 
        ap_const_lv28_8000000 when (underflow_4_fu_1097_p2(0) = '1') else 
        p_Val2_29_fu_1079_p1;
    p_not38_i1_i_fu_420_p2 <= "0" when (p_Result_i_fu_380_p4 = ap_const_lv2_3) else "1";
    p_not38_i_i1_fu_727_p2 <= "0" when (p_Result_i8_reg_1580 = ap_const_lv2_3) else "1";
    p_not38_i_i_fu_551_p2 <= "0" when (p_Result_1_i_reg_1541 = ap_const_lv2_3) else "1";
    p_not38_i_i_i_fu_866_p2 <= "0" when (tmp_7_fu_826_p4 = ap_const_lv2_3) else "1";
    p_not_i1_i_fu_390_p2 <= "0" when (p_Result_i_fu_380_p4 = ap_const_lv2_0) else "1";
    p_not_i_i9_fu_701_p2 <= "0" when (p_Result_i8_reg_1580 = ap_const_lv2_0) else "1";
    p_not_i_i_fu_525_p2 <= "0" when (p_Result_1_i_reg_1541 = ap_const_lv2_0) else "1";
    p_not_i_i_i_fu_836_p2 <= "0" when (tmp_7_fu_826_p4 = ap_const_lv2_0) else "1";
    ph_out_i_V <= 
        tmp_12_fu_1391_p1 when (sel_tmp7_i_fu_1369_p2(0) = '1') else 
        tmp_28_fu_1405_p3;

    -- ph_out_i_V_ap_vld assign process. --
    ph_out_i_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            ph_out_i_V_ap_vld <= ap_const_logic_1;
        else 
            ph_out_i_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ph_out_q_V <= 
        tmp_32_fu_1446_p3 when (or_cond_fu_1375_p2(0) = '1') else 
        tmp_33_fu_1454_p3;

    -- ph_out_q_V_ap_vld assign process. --
    ph_out_q_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            ph_out_q_V_ap_vld <= ap_const_logic_1;
        else 
            ph_out_q_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp3_demorgan_i_fu_1345_p2 <= (tmp_25_i_fu_1318_p2 or tmp_26_i_fu_1323_p2);
    sel_tmp3_i_fu_1351_p2 <= (sel_tmp3_demorgan_i_fu_1345_p2 xor ap_const_lv1_1);
    sel_tmp4_i_fu_1357_p2 <= (tmp_27_i_fu_1328_p2 and sel_tmp3_i_fu_1351_p2);
    sel_tmp6_i_fu_1363_p2 <= (tmp_25_i_fu_1318_p2 xor ap_const_lv1_1);
    sel_tmp7_i_fu_1369_p2 <= (tmp_26_i_fu_1323_p2 and sel_tmp6_i_fu_1363_p2);
    sel_tmp_i_fu_1339_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_Val2_32_cast_i_fu_1310_p1));
    sh_assign_1_cast6_i_fu_949_p1 <= std_logic_vector(resize(unsigned(sh_assign_fu_941_p3),28));
    sh_assign_1_cast_i_fu_953_p1 <= std_logic_vector(resize(unsigned(sh_assign_fu_941_p3),32));
    sh_assign_1_fu_989_p2 <= std_logic_vector(signed(tmp_19_cast_i_fu_985_p1) + signed(ap_const_lv9_9));
    sh_assign_2_fu_1009_p3 <= 
        tmp_8_i1_fu_1003_p2 when (isNeg_1_fu_995_p3(0) = '1') else 
        sh_assign_1_fu_989_p2;
        sh_assign_3_cast5_i_fu_1017_p1 <= std_logic_vector(resize(signed(sh_assign_2_fu_1009_p3),28));

        sh_assign_3_cast_i_fu_1021_p1 <= std_logic_vector(resize(signed(sh_assign_2_fu_1009_p3),32));

    sh_assign_3_fu_1174_p3 <= 
        tmp_17_i_fu_1168_p2 when (isNeg_2_fu_1160_p3(0) = '1') else 
        control_lf_out_gain;
    sh_assign_5_cast3_i_fu_1182_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_reg_1641),28));
    sh_assign_5_cast_i_fu_1185_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_reg_1641),32));
    sh_assign_fu_941_p3 <= 
        tmp_4_i_fu_935_p2 when (isNeg_fu_927_p3(0) = '1') else 
        control_lf_p;
    sin_adr_V_1_fu_1294_p3 <= 
        sin_adr_V_reg_1660 when (tmp_26_reg_1654(0) = '1') else 
        cos_adr_V_3_fu_1283_p2;
    sin_out_V_fu_1333_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_Val2_31_cast_i_fu_1314_p1));
    ssdm_int_V_write_assign_fu_898_p3 <= 
        ap_const_lv14_1FFF when (brmerge_i_i_i_i_fu_884_p2(0) = '1') else 
        p_Val2_24_reg_1601;
        tmp_10_cast_i_fu_790_p1 <= std_logic_vector(resize(signed(tmp_1_i1_fu_783_p3),21));

    tmp_10_fu_911_p3 <= 
        ssdm_int_V_write_assign_fu_898_p3 when (brmerge1_i_fu_893_p2(0) = '1') else 
        p_Val2_1_i_fu_905_p3;
    tmp_10_i_fu_1025_p2 <= std_logic_vector(shift_left(unsigned(tmp_5_i1_fu_957_p1),to_integer(unsigned('0' & sh_assign_3_cast_i_fu_1021_p1(31-1 downto 0)))));
    tmp_11_fu_1381_p4 <= cos_lut_q0(14 downto 4);
    tmp_11_i_fu_1031_p2 <= std_logic_vector(shift_right(signed(tmp_i1_fu_919_p3),to_integer(unsigned('0' & sh_assign_3_cast5_i_fu_1017_p1(28-1 downto 0)))));
    tmp_12_fu_1391_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_1381_p4),12));
        tmp_12_i_fu_1058_p1 <= std_logic_vector(resize(signed(p_Val2_5_fu_1053_p2),29));

        tmp_13_i_fu_1062_p1 <= std_logic_vector(resize(signed(p_Val2_26_reg_1620),29));

    tmp_15_i_fu_1091_p2 <= (newsignbit_4_fu_1083_p3 xor ap_const_lv1_1);
    tmp_16_fu_973_p1 <= tmp_6_i2_fu_961_p2(28 - 1 downto 0);
    tmp_16_i_fu_1137_p3 <= 
        p_Val2_28_mux_i_fu_1121_p3 when (brmerge_i1_fu_1115_p2(0) = '1') else 
        p_Val2_i2_fu_1129_p3;
    tmp_17_i_fu_1168_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(control_lf_out_gain));
    tmp_18_fu_1037_p1 <= tmp_10_i_fu_1025_p2(28 - 1 downto 0);
        tmp_18_i_fu_1188_p1 <= std_logic_vector(resize(signed(tmp_16_i_reg_1630),32));

        tmp_19_cast_i_fu_985_p1 <= std_logic_vector(resize(signed(control_lf_i),9));

    tmp_19_i_fu_1191_p2 <= std_logic_vector(shift_left(unsigned(tmp_18_i_fu_1188_p1),to_integer(unsigned('0' & sh_assign_5_cast_i_fu_1185_p1(31-1 downto 0)))));
        tmp_1_fu_335_p1 <= std_logic_vector(resize(signed(din_q_V),27));

    tmp_1_i1_fu_783_p3 <= (tmp_9_reg_1596 & ap_const_lv5_0);
    tmp_1_i3_fu_637_p3 <= (tmp_6_reg_1547 & ap_const_lv1_1);
    tmp_20_i_fu_1197_p2 <= std_logic_vector(shift_right(signed(tmp_16_i_reg_1630),to_integer(unsigned('0' & sh_assign_5_cast3_i_fu_1182_p1(28-1 downto 0)))));
    tmp_21_i_fu_1229_p1 <= std_logic_vector(resize(unsigned(p_Val2_33_fu_1206_p3),29));
    tmp_23_i_fu_1300_p1 <= std_logic_vector(resize(unsigned(cos_adr_V_fu_1288_p3),64));
    tmp_24_i_fu_1305_p1 <= std_logic_vector(resize(unsigned(sin_adr_V_1_fu_1294_p3),64));
    tmp_25_fu_1202_p1 <= tmp_19_i_fu_1191_p2(28 - 1 downto 0);
    tmp_25_i_fu_1318_p2 <= "1" when (msb_V_reg_1647 = ap_const_lv2_1) else "0";
    tmp_26_i_fu_1323_p2 <= "1" when (msb_V_reg_1647 = ap_const_lv2_0) else "0";
    tmp_27_fu_1395_p4 <= sel_tmp_i_fu_1339_p2(15 downto 4);
    tmp_27_i_fu_1328_p2 <= "1" when (msb_V_reg_1647 = ap_const_lv2_3) else "0";
    tmp_28_fu_1405_p3 <= 
        tmp_12_fu_1391_p1 when (sel_tmp4_i_fu_1357_p2(0) = '1') else 
        tmp_27_fu_1395_p4;
    tmp_29_fu_1422_p4 <= cos_lut_q1(14 downto 4);
    tmp_30_fu_1432_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_1422_p4),12));
    tmp_31_fu_1436_p4 <= sin_out_V_fu_1333_p2(15 downto 4);
    tmp_32_fu_1446_p3 <= 
        tmp_30_fu_1432_p1 when (sel_tmp7_i_fu_1369_p2(0) = '1') else 
        tmp_31_fu_1436_p4;
    tmp_33_fu_1454_p3 <= 
        tmp_30_fu_1432_p1 when (tmp_25_i_fu_1318_p2(0) = '1') else 
        tmp_31_fu_1436_p4;
        tmp_35_cast_i_fu_1225_p1 <= std_logic_vector(resize(signed(tmp_i2_15_fu_1217_p3),29));

    tmp_3_fu_467_p3 <= 
        tmp_5_fu_458_p2 when (brmerge8_i_fu_447_p2(0) = '1') else 
        tmp_s_fu_463_p2;
    tmp_3_i1_fu_848_p2 <= (isneg_3_fu_800_p3 xor ap_const_lv1_1);
    tmp_3_i_fu_475_p3 <= (reg_312 & ap_const_lv11_0);
    tmp_4_fu_610_p2 <= (newsignbit_1_reg_1533 and not_brmerge_i_i_i_fu_604_p2);
    tmp_4_i_fu_935_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(control_lf_p));
    tmp_5_fu_458_p2 <= (newsignbit_reg_1497 and not_brmerge_i_i1_i_fu_452_p2);
        tmp_5_i1_fu_957_p1 <= std_logic_vector(resize(signed(tmp_i1_fu_919_p3),32));

    tmp_5_i_fu_402_p2 <= (isneg_fu_364_p3 xor ap_const_lv1_1);
    tmp_6_fu_620_p3 <= 
        tmp_4_fu_610_p2 when (brmerge9_i_fu_579_p2(0) = '1') else 
        tmp_8_fu_615_p2;
    tmp_6_i2_fu_961_p2 <= std_logic_vector(shift_left(unsigned(tmp_5_i1_fu_957_p1),to_integer(unsigned('0' & sh_assign_1_cast_i_fu_953_p1(31-1 downto 0)))));
    tmp_6_i_fu_340_p3 <= (reg_312 & ap_const_lv11_0);
    tmp_7_fu_826_p4 <= p_Val2_23_fu_794_p2(20 downto 19);
    tmp_7_i1_fu_967_p2 <= std_logic_vector(shift_right(signed(tmp_i1_fu_919_p3),to_integer(unsigned('0' & sh_assign_1_cast6_i_fu_949_p1(28-1 downto 0)))));
    tmp_7_i_fu_535_p2 <= (isneg_1_reg_1527 xor ap_const_lv1_1);
    tmp_8_fu_615_p2 <= (underflow_1_fu_562_p2 or newsignbit_1_reg_1533);
    tmp_8_i1_fu_1003_p2 <= std_logic_vector(signed(ap_const_lv9_1F7) - signed(tmp_19_cast_i_fu_985_p1));
    tmp_8_i_fu_711_p2 <= (isneg_2_reg_1562 xor ap_const_lv1_1);
    tmp_9_fu_775_p3 <= 
        p_Val2_21_mux_i_fu_761_p3 when (brmerge_i_fu_755_p2(0) = '1') else 
        p_Val2_i1_fu_768_p3;
    tmp_i1_fu_919_p3 <= (tmp_10_fu_911_p3 & ap_const_lv14_0);
    tmp_i2_15_fu_1217_p3 <= (phase_angle_V & ap_const_lv11_0);
    tmp_i2_fu_585_p3 <= (tmp_3_reg_1516 & ap_const_lv1_1);
    tmp_s_fu_463_p2 <= (underflow_reg_1509 or newsignbit_reg_1497);
    underflow_1_fu_562_p2 <= (brmerge39_i_i_fu_556_p2 and isneg_1_reg_1527);
    underflow_1_not_i_fu_573_p2 <= (underflow_1_fu_562_p2 xor ap_const_lv1_1);
    underflow_2_fu_738_p2 <= (brmerge39_i_i1_fu_732_p2 and isneg_2_reg_1562);
    underflow_3_fu_878_p2 <= (brmerge39_i_i_i_fu_872_p2 and isneg_3_fu_800_p3);
    underflow_4_fu_1097_p2 <= (isneg_4_fu_1071_p3 and tmp_15_i_fu_1091_p2);
    underflow_4_not_i_fu_888_p2 <= (underflow_3_reg_1613 xor ap_const_lv1_1);
    underflow_fu_432_p2 <= (brmerge39_i1_i_fu_426_p2 and isneg_fu_364_p3);
    underflow_not_i1_fu_749_p2 <= (underflow_2_fu_738_p2 xor ap_const_lv1_1);
    underflow_not_i_fu_442_p2 <= (underflow_reg_1509 xor ap_const_lv1_1);
end behav;
