// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _qam_dem_top_HH_
#define _qam_dem_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "qam_dem_top_mounstrito.h"

namespace ap_rtl {

struct qam_dem_top : public sc_module {
    // Port declarations 21
    sc_in< sc_lv<16> > din_i_V;
    sc_in< sc_lv<16> > din_q_V;
    sc_out< sc_lv<16> > dout_mix_i_V;
    sc_out< sc_lv<16> > dout_mix_q_V;
    sc_in< sc_lv<12> > ph_in_i_V;
    sc_in< sc_lv<12> > ph_in_q_V;
    sc_out< sc_lv<12> > ph_out_i_V;
    sc_out< sc_lv<12> > ph_out_q_V;
    sc_out< sc_lv<28> > loop_integ_V;
    sc_in< sc_lv<2> > control_qam_V;
    sc_in< sc_lv<8> > control_lf_p;
    sc_in< sc_lv<8> > control_lf_i;
    sc_in< sc_lv<8> > control_lf_out_gain;
    sc_in< sc_lv<1> > control_reg_clr;
    sc_in< sc_lv<28> > control_reg_init_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    qam_dem_top(sc_module_name name);
    SC_HAS_PROCESS(qam_dem_top);

    ~qam_dem_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    qam_dem_top_mounstrito* qam_dem_top_mounstrito_U0;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ap_start;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ap_done;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ap_continue;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ap_idle;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ap_ready;
    sc_signal< sc_lv<16> > qam_dem_top_mounstrito_U0_din_i_V;
    sc_signal< sc_lv<16> > qam_dem_top_mounstrito_U0_din_q_V;
    sc_signal< sc_lv<16> > qam_dem_top_mounstrito_U0_dout_mix_i_V;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_dout_mix_i_V_ap_vld;
    sc_signal< sc_lv<16> > qam_dem_top_mounstrito_U0_dout_mix_q_V;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_dout_mix_q_V_ap_vld;
    sc_signal< sc_lv<12> > qam_dem_top_mounstrito_U0_ph_in_i_V;
    sc_signal< sc_lv<12> > qam_dem_top_mounstrito_U0_ph_in_q_V;
    sc_signal< sc_lv<12> > qam_dem_top_mounstrito_U0_ph_out_i_V;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ph_out_i_V_ap_vld;
    sc_signal< sc_lv<12> > qam_dem_top_mounstrito_U0_ph_out_q_V;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_ph_out_q_V_ap_vld;
    sc_signal< sc_lv<28> > qam_dem_top_mounstrito_U0_loop_integ_V;
    sc_signal< sc_logic > qam_dem_top_mounstrito_U0_loop_integ_V_ap_vld;
    sc_signal< sc_lv<8> > qam_dem_top_mounstrito_U0_control_lf_p;
    sc_signal< sc_lv<8> > qam_dem_top_mounstrito_U0_control_lf_i;
    sc_signal< sc_lv<8> > qam_dem_top_mounstrito_U0_control_lf_out_gain;
    sc_signal< sc_lv<1> > qam_dem_top_mounstrito_U0_control_reg_clr;
    sc_signal< sc_lv<28> > qam_dem_top_mounstrito_U0_control_reg_init_V;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_reg_procdone_qam_dem_top_mounstrito_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<28> ap_const_lv28_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_dout_mix_i_V();
    void thread_dout_mix_q_V();
    void thread_loop_integ_V();
    void thread_ph_out_i_V();
    void thread_ph_out_q_V();
    void thread_qam_dem_top_mounstrito_U0_ap_continue();
    void thread_qam_dem_top_mounstrito_U0_ap_start();
    void thread_qam_dem_top_mounstrito_U0_control_lf_i();
    void thread_qam_dem_top_mounstrito_U0_control_lf_out_gain();
    void thread_qam_dem_top_mounstrito_U0_control_lf_p();
    void thread_qam_dem_top_mounstrito_U0_control_reg_clr();
    void thread_qam_dem_top_mounstrito_U0_control_reg_init_V();
    void thread_qam_dem_top_mounstrito_U0_din_i_V();
    void thread_qam_dem_top_mounstrito_U0_din_q_V();
    void thread_qam_dem_top_mounstrito_U0_ph_in_i_V();
    void thread_qam_dem_top_mounstrito_U0_ph_in_q_V();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
