// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <iostream>
#include <cstdlib>
#define AP_INT_MAX_W 32678

#include "ap_fixed.h"

#include  "hls_design.h"
#include  "hls_util.h"
using namespace std;
using namespace HLS_Util;

typedef struct cdata_t {
ap_fixed<16, 3, (ap_q_mode) 5, (ap_o_mode)3, 0> i;
ap_fixed<16, 3, (ap_q_mode) 5, (ap_o_mode)3, 0> q;
} cdata_t;
typedef struct cphase_t {
ap_fixed<12, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> i;
ap_fixed<12, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> q;
} cphase_t;
typedef struct ctl_crec_t {
ap_ufixed<2, 2, (ap_q_mode) 5, (ap_o_mode)3, 0> qam;
char lf_p;
char lf_i;
char lf_out_gain;
bool reg_clr;
ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)0, 0> reg_init;
} ctl_crec_t;




#define qam_dem_top AESL_ORIG_DUT_qam_dem_top
extern void qam_dem_top ( cdata_t din,  cdata_t* dout_mix,  cphase_t ph_in,  cphase_t* ph_out,  ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)3, 0>* loop_integ,  ctl_crec_t control);
#undef qam_dem_top

void qam_dem_top ( cdata_t din,  cdata_t* dout_mix,  cphase_t ph_in,  cphase_t* ph_out,  ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)3, 0>* loop_integ,  ctl_crec_t control);
void HLS_Design::run_c_sim() {

    cdata_t din;

    cdata_t* dout_mix = new cdata_t;

    cphase_t ph_in;

    cphase_t* ph_out = new cphase_t;

    ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)3, 0>* loop_integ = new ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)3, 0>;

    ctl_crec_t control;

    HLS_UINT32 hls_port_index = 0;

    hls_port_index = get_port_index("din_i_V");

    (din.i).range() = to_apfixed<16, 3, (ap_q_mode) 5, (ap_o_mode)3, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    hls_port_index = get_port_index("din_q_V");

    (din.q).range() = to_apfixed<16, 3, (ap_q_mode) 5, (ap_o_mode)3, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    hls_port_index = get_port_index("ph_in_i_V");

    (ph_in.i).range() = to_apfixed<12, 1, (ap_q_mode) 5, (ap_o_mode)3, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    hls_port_index = get_port_index("ph_in_q_V");

    (ph_in.q).range() = to_apfixed<12, 1, (ap_q_mode) 5, (ap_o_mode)3, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    hls_port_index = get_port_index("control_qam_V");

    (control.qam).range() = to_apufixed<2, 2, (ap_q_mode) 5, (ap_o_mode) 3, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    hls_port_index = get_port_index("control_lf_p");

    control.lf_p = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("control_lf_i");

    control.lf_i = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("control_lf_out_gain");

    control.lf_out_gain = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("control_reg_clr");

    control.reg_clr = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("control_reg_init_V");

    (control.reg_init).range() = to_apfixed<28, 2, (ap_q_mode) 5, (ap_o_mode)0, 0 >(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()).range();

    AESL_ORIG_DUT_qam_dem_top(din,dout_mix,ph_in,ph_out,loop_integ,control);

    hls_port_index = get_port_index("dout_mix_i_V");

    HLS_UINT32 apatb_dout_mix_i_V_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_dout_mix_i_V_output, dout_mix->i, static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_dout_mix_i_V_output);

    hls_port_index = get_port_index("dout_mix_q_V");

    HLS_UINT32 apatb_dout_mix_q_V_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_dout_mix_q_V_output, dout_mix->q, static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_dout_mix_q_V_output);

    hls_port_index = get_port_index("ph_out_i_V");

    HLS_UINT32 apatb_ph_out_i_V_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_ph_out_i_V_output, ph_out->i, static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_ph_out_i_V_output);

    hls_port_index = get_port_index("ph_out_q_V");

    HLS_UINT32 apatb_ph_out_q_V_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_ph_out_q_V_output, ph_out->q, static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_ph_out_q_V_output);

    hls_port_index = get_port_index("loop_integ_V");

    HLS_UINT32 apatb_loop_integ_V_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_loop_integ_V_output, *((ap_fixed<28, 2, (ap_q_mode) 5, (ap_o_mode)3, 0> *)loop_integ), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_loop_integ_V_output);

    delete dout_mix;

    delete ph_out;

    delete loop_integ;
}

